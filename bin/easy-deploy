#!/usr/bin/env node
const path = require('path');
const fs = require('fs');
let commander = require('commander');

commander.option('--only <server_names>', '针对部分程序(start、stop、restart适用)，逗号隔开')

commander.command('start <config_file>')
    .option('--only [items]', '启动部分程序，逗号隔开', (val) => val.split(','))
    .description('启动项目')
    .action((configFile, {only}) => {
        require(`${__dirname}/../src/core`).start(path.resolve(__dirname,  configFile), only);
    })
    
commander.command('stop <config_file>')
    .description('停止项目')
    .option('--only <items>', '停止部分程序，逗号隔开', (val) => val.split(','))
    .action((configFile, {only}) => {
        require(`${__dirname}/../src/core`).stop(path.resolve(__dirname,  configFile), only);
    })

commander.command('restart <config_file>')
    .description('重启项目')
    .option('--only <items>', '重启部分程序，逗号隔开', (val) => val.split(','))
    .action((configFile, {only}) => {
        require(`${__dirname}/../src/core`).restart(path.resolve(__dirname,  configFile), only);
    })

commander.command('deploy <config_files...>')
    .description('发布(多个)项目')
    .action((configFiles) => {
        require(`${__dirname}/../src/core`).deploy(configFiles.map(_ => path.resolve(__dirname,  _)));
    })

commander.command('ecosystem <target_config_file>')
    .description('生成配置模板,例如：xxx.js')
    .action((configFile) => {
        fs.copyFileSync(`${__dirname}/../template/demo.js`, path.resolve(__dirname, configFile));
        console.log(`\x1b[32mconfig ${path.resolve(__dirname, configFile)} generated\x1b[0m`)
    })    
commander.parse(process.argv);

if (!process.argv.slice(2).length) {
    commander.outputHelp((txt) => `\x1b[33m${txt}\x1b[0m`);
}